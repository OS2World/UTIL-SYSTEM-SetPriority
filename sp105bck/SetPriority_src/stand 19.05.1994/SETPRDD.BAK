; Treiber zum setzen der PrioritÑt einer DOS-Sitzung.
	.386p																;Privilegierte Befehle zulassen
	MODEL FLAT

	include setprdd.inc

	ASSUME	CS:FLAT, DS:FLAT, SS:FLAT, ES:FLAT

	PUBLIC  _VDDINIT

INSTANCE_DATA	SEGMENT	DWORD USE32 PUBLIC 'DATA'	;Instanz-Datenfeld

this_VDM	DD 0H
this_CLASS DD 2H															  ;aktuelle Klasse
idlecall_old_class DD 0H                        ;aktueller Offset der jeweiligen Klasse
idlecall_old_offset DD 0H
offset_nochange DD 0H														;hiermit kînnen witzige Effekte auftreten. Sie werden nicht abgefangen.
offset_idle_class DD 0H
offset_regular_class DD 0H
offset_tc_class DD 0H
offset_fg_class DD 0H
offset_si_class DD 0H
INSTANCE_DATA	ENDS

INIT_CODE	SEGMENT DWORD USE32 PUBLIC 'CODE'

	ALIGN 04H
_VDDINIT	PROC NEAR
	PUSH	EBP
	MOV	EBP,ESP

	PUSH VDM_CREATE
	PUSH OFFSET FLAT: SetPrioCreate
	CALL	VDHINSTALLUSERHOOK
	OR	EAX,EAX												  ;Vergleich auf Null (clever)
	JNE	FELB3                           ;Create Hook erfolgreich, weiter

	XOR	EAX,EAX                         ;nicht erfolgreich, Abbruch
	LEAVE
	RET
	ALIGN 04H

FELB3:
	MOV	EAX,01H                         ;Create Hook erfolgreich, weiter
	LEAVE
	RET	
_VDDINIT	ENDP
INIT_CODE	ENDS

; Initialisierungsroutinen

SWAP_CODE	SEGMENT DWORD USE32 PUBLIC 'CODE'
	ALIGN 04H

	PUBLIC SetPrioCreate

SetPrioCreate	PROC NEAR
	PUSH	EBP
	MOV	EBP,ESP

	MOV	EAX,[EBP+08H];	hvdm
	MOV	DWORD PTR  this_VDM,EAX

	PUSH 0h															;VDHINSTALLINTHOOK aufrufen
	PUSH IntVector
	PUSH OFFSET FLAT:PrioIntHook
	PUSH VDH_ASM_HOOK
	CALL VDHINSTALLINTHOOK

	MOV	EAX,01H
	LEAVE
	RET 4
SetPrioCreate	ENDP

;PrioIntHook Function
	ALIGN 04H

	PUBLIC PrioIntHook

PrioIntHook PROC NEAR
	PUSH  EBP
	MOV	EBP,ESP

	MOV EDX,DWORD PTR [EBX+14h]
	MOV EAX,DWORD PTR [EBX+1Ch]					
	AND EAX,0000FFFFh
	AND EDX,0000FFFFh
	OR  EAX,EAX													;Funktionswert ungleich null?
	JNZ IDLE_TEST
	XOR EAX,EAX                         ;nein, Fehler
	JMP Ende

IDLE_TEST:
	ALIGN 04h
	CMP EAX,FuncValue                   ;erstmal schaun, ob das ein IdleCall war
	JNE SETPRIORITY_NORMAL

	MOV EAX,this_CLASS									;IDLECALL: auf auf, sichern
	MOV idlecall_old_class,EAX
	SHL EAX, 2h
	MOV ECX, OFFSET FLAT:offset_nochange
	ADD EAX, ECX
	MOV ECX, [EAX]
	MOV idlecall_old_offset, ECX

	MOV EAX, 2h
	XOR EDX, EDX												;StandardprioritÑt setzen
	CALL SetPriority

	PUSH 0                              ;Versuch, Zeitscheibe los zu werden
	CALL VDHYIELD

	MOV EAX,idlecall_old_class					; Alte PrioritÑt setzen
	MOV EDX,idlecall_old_offset
	JMP Alles_OK

SETPRIORITY_NORMAL:
	ALIGN 04h
	CMP EAX, 05h												; obere Grenze der Klassen abprÅfen
	JNG Delta_Obergrenze
	XOR EAX,EAX
	JMP Ende

Delta_Obergrenze:                    	; hier reicht es, die Obergrenze zu
	ALIGN 04h														; prÅfen, da negative Zahlen durch das
	CMP EDX,1Fh                         ; AND EDX, 0000FFFFh ausgeschlossen sind.
	JNG Alles_OK
	XOR EAX,EAX
	JMP Ende

Alles_OK:
	ALIGN 04h
	CALL SetPriority

	MOV EAX, 1h													;alles OK

Ende:

	Align 04h

	CLC
	CMC
	LEAVE
	RET
PrioIntHook ENDP

	ALIGN 04H
SetPriority PROC NEAR
;Parameter: in EAX Class, in EDX Delta

	PUSH  EBP
	MOV	EBP,ESP

	MOV this_CLASS, EAX                 ;neue Klasse merken

	PUSH EAX														;EAX sichern
	SHL EAX, 2h													;Multiplikation mit 4
	MOV ECX, OFFSET FLAT:offset_nochange;Anfansadresse der Struktur holen
	ADD EAX, ECX                        ;Strukturoffset errechnen
	MOV ECX, [EAX]
	MOV DWORD PTR [EAX], EDX						;alten Offset sichern
	SUB EDX, ECX                        ;differentiellen Offset errechnen
	POP EAX

	PUSH this_VDM                       ;und setzen
	PUSH EAX
	PUSH EDX
	CALL VDHSETPRIORITY

	LEAVE
	RET
SetPriority ENDP

SWAP_CODE	ENDS

END _VDDINIT